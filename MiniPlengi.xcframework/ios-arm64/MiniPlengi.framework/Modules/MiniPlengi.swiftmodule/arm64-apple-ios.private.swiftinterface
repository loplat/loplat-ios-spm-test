// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MiniPlengi
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport.ASIdentifierManager
import AdSupport
import AppTrackingTransparency
import BackgroundTasks
import SystemConfiguration.CaptiveNetwork
import Compression
import CoreLocation
import CoreML
import CoreMotion
import Foundation
import MessageUI
@_exported import MiniPlengi
import NetworkExtension
import SQLite3
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import os
public enum MonitoringType : Swift.Int {
  case STAY
  case TRACKING
  case ADV_TRACKING
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 9.0, *)
open class TEST_SDKConfig {
  public var config_id: Swift.Int {
    get
  }
  public var period_move: Swift.Int {
    get
  }
  public var period_stay: Swift.Int {
    get
  }
  public var use_adid: Swift.Bool {
    get
  }
  public var force_stop: Swift.Bool {
    get
  }
  public var manual_api: Swift.Bool {
    get
  }
  public var ble_url: Swift.String {
    get
  }
  public var ad_url: Swift.String {
    get
  }
  public var place_url: Swift.String {
    get
  }
  public var sdk_mode: MiniPlengi.MonitoringType {
    get
  }
  public var interval: Swift.Int {
    get
  }
  public var significant_location: Swift.Bool {
    get
  }
  public var background_use: Swift.Bool {
    get
  }
  public var crash_reporter: Swift.Bool {
    get
  }
  public init(sdkConfig: Any?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Plengi : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @available(iOS 14.0, *)
  @objc public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  public static var isTestServer: MiniPlengi.TestModeStatus
  @objc deinit
}
public enum DeflateError : Swift.Error {
  case wrongUncompressedBlockLengths
  case wrongBlockType
  case wrongSymbol
  case symbolNotFound
  public static func == (a: MiniPlengi.DeflateError, b: MiniPlengi.DeflateError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class Fence : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var gfid: Swift.Int
  @objc public var dist: Swift.Double
  @objc public var name: Swift.String
  @objc public var client_code: Swift.String
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class Geofence : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var lat: Swift.Double
  @objc public var lng: Swift.Double
  @objc public var fences: [MiniPlengi.Fence]
  convenience public init?(_ data: Any?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 9.0, *)
extension MiniPlengi.Plengi {
  public class func TEST_sdkVersion() -> Swift.String?
  public class func TEST_userPersonalData() -> (ID: Swift.String?, secret: Swift.String?, code: Swift.String?)
  public class func TEST_requestLocationPermission()
  public class func TEST_uuidList(lat: Swift.Double, lng: Swift.Double) -> Swift.Array<Swift.String>
  public class func TEST_currentWifiInfo() -> (ssid: Swift.String?, bssid: Swift.String?)
  public class func changeMode(sdkMode: MiniPlengi.MonitoringType)
  @available(iOS 10.0, *)
  public class func fetchLogs() -> [(message: Swift.String, time: Swift.Int64, plengiResponse: Foundation.Data?)]
  @available(iOS 10.0, *)
  public class func removeAllLog()
  @available(iOS 9.0, *)
  public class func getIdfa() -> Swift.String?
  @objc public static var isDebug: Swift.Bool {
    @objc get
    @objc set
  }
  public class func startLogViewTimer()
}
@_inheritsConvenienceInitializers @objc open class Place : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var loplat_id: Swift.Int
  @objc public var name: Swift.String
  @objc public var tags: Swift.String
  @objc public var distance: Swift.Int
  @objc public var floor: Swift.Int
  @objc public var lat: Swift.Double
  @objc public var lng: Swift.Double
  @objc public var accuracy: Swift.Double
  @objc public var threshold: Swift.Double
  @objc public var client_code: Swift.String
  @objc public var category: Swift.String
  @objc public var category_code: Swift.String
  @objc public var address: Swift.String
  @objc public var address_road: Swift.String
  @objc public var post: Swift.String
  @objc public var pnu: Swift.String
  convenience public init?(_ data: Any?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func topMostViewController() -> UIKit.UIViewController
}
@objc public enum CarDetectionEngineStatus : Swift.Int {
  case STARTED = 1
  case STOPPED = -1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CarDetectionStatus : Swift.Int {
  case FOUND = 1
  case LOST = -1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class Location : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var provider: Swift.String
  @objc public var floor: Swift.Int
  @objc public var time: Swift.Int64
  @objc public var lat: Swift.Double
  @objc public var lng: Swift.Double
  @objc public var accuracy: Swift.Double
  convenience public init?(_ data: Any?)
  convenience public init(lat: Swift.Double, lng: Swift.Double)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class Advertisement : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc open var alarm: Swift.String
  @objc open var title: Swift.String?
  @objc open var body: Swift.String?
  @objc open var img: Swift.String
  @objc open var campaign_id: Swift.Int
  @objc open var delay: Swift.Int
  @objc open var delay_type: Swift.String
  @objc open var intent: Swift.String
  @objc open var msg_id: Swift.Int
  @objc open var target_pkg: Swift.String
  @objc open var client_code: Swift.String
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
extension MiniPlengi.Advertisement {
  public func adSend(phoneNumber: Swift.String)
}
@objc public enum CarDetectionResult : Swift.Int {
  case SUCCESS = 0
  case FAIL = -1
  case NOT_STARTED = -2
  case ALREADY_STARTED = -8
  case NOT_INITIALIZED = -9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Result : Swift.Int {
  case SUCCESS = 0
  case FAIL = -1
  case PENDING = -2
  case NETWORK_FAIL = -3
  case ERROR_CLOUD_ACCESS = -4
  case FAIL_INTERNET_UNAVAILABLE = -5
  case FAIL_WIFI_SCAN_UNAVAILABLE = -6
  case NOT_SUPPORTED_OS_VERSION = -7
  case ALREADY_STARTED = -8
  case NOT_INITIALIZED = -9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PlaceEvent : Swift.Int {
  case NOT_AVAILABLE = 0
  case ENTER = 1
  case LEAVE = 2
  case NEARBY = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ResponseType : Swift.Int {
  case UNKNOWN = 0
  case PLACE = 1
  case PLACE_EVENT = 2
  case IP_LOC_EVENT = 4
  case LOGGING = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class PlengiResponse : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var echoCode: Swift.String?
  @objc public var errorReason: Swift.String?
  @objc public var result: MiniPlengi.Result
  @objc public var type: MiniPlengi.ResponseType
  @objc public var placeEvent: MiniPlengi.PlaceEvent
  @objc public var place: MiniPlengi.Place?
  @objc public var area: MiniPlengi.Area?
  @objc public var complex: MiniPlengi.Complex?
  @objc public var geofence: MiniPlengi.Geofence?
  @objc public var nearbys: Swift.Array<MiniPlengi.Nearbys>?
  @objc public var district: MiniPlengi.District?
  @objc public var advertisement: MiniPlengi.Advertisement?
  @objc public var location: MiniPlengi.Location?
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public func decode(coder aDecoder: Foundation.NSCoder)
  @objc open func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PlaceDelegate {
  @objc func responsePlaceEvent(_ plengiResponse: MiniPlengi.PlengiResponse)
}
@_inheritsConvenienceInitializers @objc open class Area : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var id: Swift.Int
  @objc public var name: Swift.String
  @objc public var tag: Swift.String
  @objc public var lat: Swift.Double
  @objc public var lng: Swift.Double
  convenience public init?(_ data: Any?)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Deflate {
  public static func decompress(data: Foundation.Data) throws -> Foundation.Data
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class Complex : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var id: Swift.Int
  @objc public var name: Swift.String
  @objc public var branch_name: Swift.String
  @objc public var category: Swift.String
  @objc public var category_code: Swift.String
  convenience public init?(_ data: Any?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum EngineStatus : Swift.Int {
  case STOPPED = 0
  case STARTED = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TestModeStatus : Swift.Int {
  case RELEASE_SERVER = 0
  case HALF_STAGING_SERVER = 1
  case FULL_STAGING_SERVER = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MiniPlengi.Plengi {
  @available(*, deprecated, message: "This method will be deprecated loplat SDK v1.3.2\nPlease consider using `Plengi.initialize()` API instead.`")
  @objc dynamic public class func `init`(clientID ID: Swift.String, clientSecret secret: Swift.String, echoCode: Swift.String? = nil) -> MiniPlengi.Result
  @objc dynamic public class func setEchoCode(echoCode: Swift.String?) -> MiniPlengi.Result
  @objc dynamic public class func initialize(clientID ID: Swift.String, clientSecret secret: Swift.String) -> MiniPlengi.Result
  @objc dynamic public class func stop() -> MiniPlengi.Result
  @objc dynamic public class func start() -> MiniPlengi.Result
  @objc dynamic public class func start(_ interval: Swift.Int) -> MiniPlengi.Result
  @objc dynamic public class func requestAlwaysLocationAuthorization()
}
extension MiniPlengi.Plengi {
  @objc dynamic public class func getDelegate() -> MiniPlengi.PlaceDelegate?
  @objc dynamic public class func setDelegate(_ delegate: MiniPlengi.PlaceDelegate?) -> MiniPlengi.Result
  @objc dynamic public class func getEngineStatus() -> MiniPlengi.EngineStatus
  @objc dynamic public class func isEnabledAdNetwork() -> Swift.Bool
  @objc dynamic public class func enableAdNetwork(_ enableAd: Swift.Bool, enableNoti: Swift.Bool = true) -> MiniPlengi.Result
}
extension MiniPlengi.Plengi {
  @objc dynamic public class func manual_refreshPlace_foreground() -> MiniPlengi.Result
  @available(iOS 9.0, *)
  @objc dynamic public class func manual_refreshPlace_ip_location() -> MiniPlengi.Result
}
extension MiniPlengi.Plengi {
  @available(iOS 10.0, *)
  @objc dynamic public class func processLoplatAdvertisement(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void) -> MiniPlengi.Result
  @objc dynamic public class func processLoplatAdvertisement(_ application: UIKit.UIApplication, handleActionWithIdentifier identifier: Swift.String?, for notification: UIKit.UILocalNotification, completionHandler: @escaping () -> Swift.Void) -> MiniPlengi.Result
  @objc dynamic public class func processLoplatAdvertisement(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [Swift.AnyHashable : Any]?) -> MiniPlengi.Result
}
extension MiniPlengi.Plengi {
  @objc dynamic public class func getCurrentLocationInfo(completion: @escaping (_ plengiResponse: MiniPlengi.PlengiResponse) -> Swift.Void) -> MiniPlengi.Result
  public class func registerBgFetch()
  public class func setLocationAuthorizationAlert(title: Swift.String, message: Swift.String)
}
@_inheritsConvenienceInitializers @objc open class District : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var lv0_code: Swift.String
  @objc public var lv1_name: Swift.String
  @objc public var lv2_name: Swift.String
  @objc public var lv3_name: Swift.String
  @objc public var lv1_code: Swift.String
  @objc public var lv2_code: Swift.String
  @objc public var lv3_code: Swift.String
  convenience public init?(_ data: Any?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class Nearbys : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var loplat_id: Swift.Int
  @objc public var placename: Swift.String
  @objc public var tags: Swift.String
  @objc public var floor: Swift.Int
  @objc public var lat: Swift.Double
  @objc public var lng: Swift.Double
  @objc public var accuracy: Swift.Double
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
extension MiniPlengi.Deflate {
  public static func compress(data: Foundation.Data) -> Foundation.Data
}
extension MiniPlengi.MonitoringType : Swift.Equatable {}
extension MiniPlengi.MonitoringType : Swift.Hashable {}
extension MiniPlengi.MonitoringType : Swift.RawRepresentable {}
extension MiniPlengi.DeflateError : Swift.Equatable {}
extension MiniPlengi.DeflateError : Swift.Hashable {}
extension MiniPlengi.CarDetectionEngineStatus : Swift.Equatable {}
extension MiniPlengi.CarDetectionEngineStatus : Swift.Hashable {}
extension MiniPlengi.CarDetectionEngineStatus : Swift.RawRepresentable {}
extension MiniPlengi.CarDetectionStatus : Swift.Equatable {}
extension MiniPlengi.CarDetectionStatus : Swift.Hashable {}
extension MiniPlengi.CarDetectionStatus : Swift.RawRepresentable {}
extension MiniPlengi.CarDetectionResult : Swift.Equatable {}
extension MiniPlengi.CarDetectionResult : Swift.Hashable {}
extension MiniPlengi.CarDetectionResult : Swift.RawRepresentable {}
extension MiniPlengi.Result : Swift.Equatable {}
extension MiniPlengi.Result : Swift.Hashable {}
extension MiniPlengi.Result : Swift.RawRepresentable {}
extension MiniPlengi.PlaceEvent : Swift.Equatable {}
extension MiniPlengi.PlaceEvent : Swift.Hashable {}
extension MiniPlengi.PlaceEvent : Swift.RawRepresentable {}
extension MiniPlengi.ResponseType : Swift.Equatable {}
extension MiniPlengi.ResponseType : Swift.Hashable {}
extension MiniPlengi.ResponseType : Swift.RawRepresentable {}
extension MiniPlengi.EngineStatus : Swift.Equatable {}
extension MiniPlengi.EngineStatus : Swift.Hashable {}
extension MiniPlengi.EngineStatus : Swift.RawRepresentable {}
extension MiniPlengi.TestModeStatus : Swift.Equatable {}
extension MiniPlengi.TestModeStatus : Swift.Hashable {}
extension MiniPlengi.TestModeStatus : Swift.RawRepresentable {}
